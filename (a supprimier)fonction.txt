#include "fonction.h"
/*
// Fonction permettant de connaître le nombre de joueurs
int NbrPlayers() {
    int n;  // Variable pour stocker le nombre de joueurs
    do {
    printf("Entrez le nombre de Players (entre 2 et 6) : \n");  // Demande à l'utilisateur de saisir le nombre de joueurs
    if (scanf("%d", &n) != 1) {  // Vérification de la saisie, s'assurer que c'est un nombre
        printf("Mauvaise saisie. ");
        while (getchar() != '\n');  // Vider le buffer d'entrée pour ignorer les saisies incorrectes
        continue;  // Recommencer la boucle
    }
    if (n < 2 || n > 6) {  // Vérification si le nombre de joueurs est dans la plage valide
        printf("Mauvaise saisie. ");
    }
    } while (n < 2 || n > 6);  // Répéter tant que le nombre de joueurs n'est pas entre 2 et 6
    return n;  // Retourner le nombre de joueurs valide
}

    // Fonction permettant de saisir les noms des joueurs
    void PlayersName(Player playerList[], int nbrPlayer) {
    while (getchar() != '\n');  // Nettoyer le buffer d'entrée
    for (int i = 0; i < nbrPlayer; i++) {  // Boucle pour chaque joueur
    do {
        printf("Entrer le nom du Player %d (%d caractères max) : \n", i + 1, SIZE - 1);
        fgets(playerList[i].name, 100, stdin);  // Lecture du nom du joueur
        playerList[i].name[strcspn(playerList[i].name, "\n")] = '\0';  // Suppression du retour à la ligne
        if (strlen(playerList[i].name) >= SIZE) {  // Vérification si le nom dépasse la limite de caractères
        printf("Mauvaise saisie. ");
        while (getchar() != '\n');  // Vider le buffer d'entrée
        continue;  // Recommencer la boucle pour resaisir le nom
        }
    } while (strlen(playerList[i].name) >= SIZE);  // Répéter tant que le nom est trop long
    }
    }

    // Fonction pour afficher les noms des joueurs
    void DisplayPlayersName(Player playerList[], int NbrPlayer) {
    for (int i = 0; i < NbrPlayer; i++) {  // Boucle pour chaque joueur
    printf("Joueur %d : %s\n", i + 1, playerList[i].name);
    }
    }

    void GivePenguin(Player playerList[], int nbrPlayer) {
    for (int i = 0; i < nbrPlayer; i++ ){
    switch(nbrPlayer) {
        case 2:
        playerList[i].nbrPenguin = 4;

        for(int j = 0; j < 4; j++){
            playerList[i].Penguin[j].NumP = j + 1;
        }

        break;
        case 3:
        playerList[i].nbrPenguin = 3;
        for(int j = 0; j < 3; j++){
            playerList[i].Penguin[j].NumP = j + 1;
        }
        break;
        case 4:
        playerList[i].nbrPenguin = 2;

        for(int j = 0; j < 2; j++){
            playerList[i].Penguin[j].NumP = j + 1;
        }
        break;
        case 5:
        playerList[i].nbrPenguin = 2;
        for(int j = 0; j < 2; j++){
            playerList[i].Penguin[j].NumP = j + 1;
        }
        break;
        case 6:
        playerList[i].nbrPenguin = 2;
        for(int j = 0; j < 2; j++){
            playerList[i].Penguin[j].NumP = j + 1;
        }
        break;
        default:
        printf("Erreur lors de l'attribution des pingouins");
    }
    }
    }


int Party() {
    // Déclaration du nombre de Players
    int nbrPlayer = NbrPlayers();
    Player playerList[nbrPlayer];
    // Déclaration du nom des Players
    PlayersName(playerList, nbrPlayer);
    // Attribution des pingouins
    GivePenguin(playerList, nbrPlayer);
}

//---------------------------------------------------------------------------------------------------------------------------------------------

void SetZero(Player playerList[], int nbrplayers) {
    for(int i = 0; i < nbrplayers; i++) {
        playerList[i].score = 0;
    }
}


void Pointgrid(Hexagon grid[L][C]){
int tab[2]= {-1,1};

    for (int i = 0; i < C; i++){
        for(int j = 0; j < L; j++){
            grid[i][j].StackOfFish = rand()%3+1;

            switch(grid[i][j].StackOfFish){
            case 1: 
                grid[i][j].value = tab[rand()%2];
            break;
            case 2:
                grid[i][j].value = tab[rand()%2] + tab[rand()%2];
            break;
            case 3:
                grid[i][j].value = tab[rand()%2] + tab[rand()%2] + tab[rand()%2];
            break;

            default:
                printf("Erreur switch case\n");
            }
            grid[i][j].status = 1;
        }
    }
}

int EnoughPlace(Hexagon grid[L][C], int nbrJoueur){

    int count = 0;
    int nbrP = nbrJoueur * 4;

    for(int i = 0; i < L; i++){
        for(int j = 0; j < C; j++){
            if(grid[i][j].StackOfFish == 1){
                count++;
            }
        }
    }    
    if(count <= nbrP){
        // pas assez de place
        Pointgrid(grid);
        return 0;
    }  
    else{
        // assez de place  
        return 1;
    }
}

void PlacePinguin(Hexagon grid[L][C], int nbrPlayer, Player PlayerList[nbrPlayer]){

    int count = 0;

    if(EnoughPlace(grid, nbrPlayer) == 1) {
        //placement des pingouins sur la grid
        for (int k = 0; k < nbrPlayer; k++){
            for (int i = 0; i < L; i++) {
                for (int j = 0; j < C; j++) {
                    if (grid[i][j].StackOfFish == 1 && grid[i][j].status == 1){
                        grid[i][j].status = 0;
                        PlayerList[k].Penguin[count].x = i;
                        PlayerList[k].Penguin[count].y = j;
                        count++;
                    }
                    else{
                        EnoughPlace(grid, nbrPlayer);
                        //génération d'une autre configuration des poissons
                    }
                }
            }
        }
    }
}

*/

/*
void moove(int choice, int turn, Player playerList[], int distance, int direction, Hexagon grid[L][C] ){

    switch (direction){
    case 1:
        for(int i = 0; i< distance; i++){           
            playerList[turn].score = grid[playerList[turn].Penguin[choice].x][playerList[turn].Penguin[choice].y].value;
            //Actualisation du score
            grid[playerList[turn].Penguin[choice].x][playerList[turn].Penguin[choice].y].status = 0;
            //Actualisation du statu de la case
            playerList[turn].Penguin[choice].y -= 1;
            //Dépalcement en Haut
        }
        break;
    case 2:
        for(int i = 0; i< distance; i++){
            playerList[turn].score = grid[playerList[turn].Penguin[choice].x][playerList[turn].Penguin[choice].y].value;
            //Actualisation du score
            grid[playerList[turn].Penguin[choice].x][playerList[turn].Penguin[choice].y].status = 0;
            //Actualisation du statu de la case
            playerList[turn].Penguin[choice].x -= 1;
            playerList[turn].Penguin[choice].y -= 1;
            //Déplacement en Haut-Gauche
        }
        break;    
    case 3:
        for(int i = 0; i< distance; i++){
            playerList[turn].score = grid[playerList[turn].Penguin[choice].x][playerList[turn].Penguin[choice].y].value;
            //Actualisation du score
            grid[playerList[turn].Penguin[choice].x][playerList[turn].Penguin[choice].y].status = 0;
            //Actualisation du statu de la case
            playerList[turn].Penguin[choice].x -= 1;
            playerList[turn].Penguin[choice].y += 1;
            //Déplacement en Haut-Droite
        }
        break;
    case 4:
        for(int i = 0; i< distance; i++){
            playerList[turn].score = grid[playerList[turn].Penguin[choice].x][playerList[turn].Penguin[choice].y].value;
            //Actualisation du score
            grid[playerList[turn].Penguin[choice].x][playerList[turn].Penguin[choice].y].status = 0;
            //Actualisation du statu de la case
            playerList[turn].Penguin[choice].y += 1;
            //Déplacement en Bas
        }
        break;
    case 5:
        for(int i = 0; i< distance; i++){
            playerList[turn].score = grid[playerList[turn].Penguin[choice].x][playerList[turn].Penguin[choice].y].value;
            //Actualisation du score
            grid[playerList[turn].Penguin[choice].x][playerList[turn].Penguin[choice].y].status = 0;
            //Actualisation du statu de la case
            playerList[turn].Penguin[choice].x -= 1;
            playerList[turn].Penguin[choice].y += 1;
            //Déplacement en Bas-Gauche
        }
        break;
    case 6:
        for(int i = 0; i< distance; i++){
            playerList[turn].score = grid[playerList[turn].Penguin[choice].x][playerList[turn].Penguin[choice].y].value;
            //Actualisation du score
            grid[playerList[turn].Penguin[choice].x][playerList[turn].Penguin[choice].y].status = 0;
            //Actualisation du statu de la case
            playerList[turn].Penguin[choice].x += 1;
            playerList[turn].Penguin[choice].y += 1;
            //Déplacement en Bas-Droite
        }
        break;
    default:
        return 1;
        break;
    }
}

int isMooveAvailable(int direction, int distance, Player playerList[], Hexagon grid[L][C]){

    Penguin position;
    position.x = playerList->Penguin->x;
    position.y = playerList->Penguin->y;

    switch (direction){
    case 1:
        for(int i = 0; i< distance; i++){
            if(position.y -1 < 0 || position.y -1 > 9){
                printf("mouvement invalide car vous sortez de la grid");
                return 1;
            }
            else if(grid[position.x][position.y].status =! 1){
                printf("obstable sur la route");
                return 1;
            }
            else{
                position.y -= 1;
            }
        }
        return 2;
        break;
    case 2:
        for(int i = 0; i< distance; i++){
            if(position.y -1 < 0 || position.y -1 > 9 && position.x -1 < 0 || position.x - 1 > 9){
                printf("mouvement invalide car vous sortez de la grid");
                return 1;
            }
            else if(grid[position.x][position.y].status =! 1){
                printf("obstable sur la route");
                return 1;
            }
            else{
                position.y -= 1;
                position.x -= 1;
            }
        }
        return 2;
        break;    
    case 3:
        for(int i = 0; i< distance; i++){
            if(position.y -1 < 0 || position.y -1 > 9 && position.x +1 < 0 || position.x +1 > 9){
                printf("mouvement invalide car vous sortez de la grid");
                return 1;
            }
            else if(grid[position.x][position.y].status =! 1){
                printf("obstable sur la route");
                return 1;
            }
            else{
                position.y -= 1;
                position.x += 1;
            }
        }
        return 2;
        break;
    case 4:
        for(int i = 0; i< distance; i++){
            if(position.y +1 < 0 || position.y +1 > 9){
                printf("mouvement invalide car vous sortez de la grid");
                return 1;
            }
            else if(grid[position.x][position.y].status =! 1){
                printf("obstable sur la route");
                return 1;
            }
            else{
                position.y += 1;
            }
        }
        return 2;
        break;
    case 5:
        for(int i = 0; i< distance; i++){
            if(position.y +1 < 0 || position.y +1 > 9 && position.x -1 < 0 || position.x -1 > 9){
                printf("mouvement invalide car vous sortez de la grid");
                return 1;
            }
            else if(grid[position.x][position.y].status =! 1){
                printf("obstable sur la route");
                return 1;
            }
            else{
                position.y += 1;
                position.x -= 1;
            }
        }
        return 2;
        break;
    case 6:
        for(int i = 0; i< distance; i++){
            if(position.y +1 < 0 || position.y +1 > 9 && position.x +1 < 0 || position.x +1 > 9){
                printf("mouvement invalide car vous sortez de la grid");
                return 1;
            }
            else if(grid[position.x][position.y].status =! 1){
                printf("obstable sur la route");
                return 1;
            }
            else{
                position.y += 1;
                position.x += 1;
            }
        }
        return 2;
        break;
    default:
        return 1;
        break;
    }

}


void ChoiceMoove(int choice, Player playerList[], int turn, Hexagon grid[L][C]){

    int direction;
    int distance;

    printf("choisissez la direction:\n");
    printf("1 = Haut\n2 = Haut_Gauche\n3 = Haut-Droite\n4 = Bas\n5 = Bas-Gauche\n6 = Bas-Droite");
    scanf("%d",direction);
    printf("choisissez la distance:\n");
    scanf("%d",distance);

    if(isMooveAvailable(direction, distance, playerList, grid) != 1){
        moove(choice, turn, playerList, distance, direction, grid);
    }
    else{
        printf("mouvement pas valide");
        ChoiceMoove(choice, playerList, turn, grid);
    }
}

IsMoovePossible(int turn, int choice, Player playerList[], Hexagon grid[L][C]){
    int possible = 0;
    int px = playerList[turn].Penguin[choice].x;
    int py = playerList[turn].Penguin[choice].y;

    for(int i = 1; i < 7; i++){

        switch (i){
        case 1:
            if(px -1 < 0 || py -1 > 9){
            }
            else if(grid[px][py].status =! 1){
            }
            else{
                possible += 1;
            }
            break;
        case 2:
            if(py -1 < 0 || py -1 > 9 || px -1 < 0 || px - 1 > 9){
            }
            else if(grid[px][py].status =! 1){
            }
            else{
                possible += 1;
            }
            break;    
        case 3:
            if(py -1 < 0 || py -1 > 9 || px +1 < 0 || px +1 > 9){
            }
            else if(grid[px][py].status =! 1){
            }
            else{
                possible += 1;
            }
            break;
        case 4:
            if(py +1 < 0 || py +1 > 9){
            }
            else if(grid[px][py].status =! 1){
            }
            else{
                possible += 1;
            }
            break;
        case 5:
            if(py +1 < 0 || py +1 > 9 || px -1 < 0 || px -1 > 9){
            }
            else if(grid[px][py].status =! 1){
            }
            else{
                possible += 1;
            }
            break;
        case 6:
            if(py +1 < 0 || py +1 > 9 && px +1 < 0 || px +1 > 9){
            }
            else if(grid[px][py].status =! 1){
            }
            else{
                possible += 1;
            }
            break;
        default:
            break;
        }
    }
}

void GameTurn(int nbrPlayers, Player playerList[], Hexagon grid[L][C]){

    int choice = 0;
    int turn = 0;

    for(int i = 0; i < nbrPlayers; i++) {
        printf("C'est au tour du joueur %d", i+1);
        do{
            printf("choisisser un pingouin capable de bouger");
            if(scanf("%d", &choice) != 1) {
                printf("Mauvaise saisie");
                while (getchar() != '\n');
                continue;
            }
        }while(choice < 1 || choice > playerList[i].nbrPenguin || IsMoovePossible(turn, choice, playerList, grid) == 0);
        turn += 1;

        ChoiceMoove(choice, playerList,turn, grid);
    }
}
*/