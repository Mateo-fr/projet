#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define SIZE 50
#define L  9
#define C  9

typedef struct {
    int x;
    int y;
    int NumP;
}Penguin;

typedef struct {
    char name[SIZE];
    int color;
    int score;
    int nbrPenguin;
    Penguin Penguin[4];
}Player;

typedef struct{
    int StackOfFish; //nombre de poissons sur une case
    int PinguinOwner; //Numéro du joueur à qui appartient le pinguin
    int status; //Le statut de la case (1 : case libre | 0 : casse occupée | -1 : casse cassée)
    int value; //valeur de la case (somme des poissons)
}hexagon;



int NbrPlayers();
void PlayersName(Player playerList[], int nbrPlayer);
void DisplayPlayersName(Player playerList[], int NbrPlayer);
void Pointgrid(hexagon grid[L][C]);

            for (int k = 1; k < 7; k++) {

                switch (k) {
                    case 1: // UP
                        if (playerList[i].penguin[j].x - 1 >= 0 && grid[playerList[i].penguin[j].y][playerList[i].penguin[j].x - 1].status == 1) {
                            possible += 1;
                        }
                        break;

                    case 2:
                        if (playerList[i].penguin[j].y % 2 == 0) {
                            if (playerList[i].penguin[j].y - 1 >= 0 && playerList[i].penguin[j].x - 1 >= 0 && grid[playerList[i].penguin[j].y - 1][playerList[i].penguin[j].x - 1].status == 1) {
                                possible += 1;
                            }
                        } else {
                            if (playerList[i].penguin[j].y - 1 >= 0 && grid[playerList[i].penguin[j].y - 1][playerList[i].penguin[j].x].status == 1) {
                                possible += 1;
                            }
                        }
                        break;

                    case 3:
                        if (playerList[i].penguin[j].y % 2 == 0) {
                            if (playerList[i].penguin[j].y + 1 < L && playerList[i].penguin[j].x - 1 >= 0 && grid[playerList[i].penguin[j].y + 1][playerList[i].penguin[j].x - 1].status == 1) {
                                possible += 1;
                            }
                        } else {
                            if (playerList[i].penguin[j].y + 1 < L && grid[playerList[i].penguin[j].y + 1][playerList[i].penguin[j].x].status == 1) {
                                possible += 1;
                            }
                        }
                        break;

                    case 4:
                        if (playerList[i].penguin[j].x + 1 < C && grid[playerList[i].penguin[j].y][playerList[i].penguin[j].x + 1].status == 1) {
                            possible += 1;
                        }
                        break;

                    case 5:
                        if (playerList[i].penguin[j].y % 2 == 0) {
                            if (playerList[i].penguin[j].y - 1 >= 0 && grid[playerList[i].penguin[j].y - 1][playerList[i].penguin[j].x].status == 1) {
                                possible += 1;
                            }
                        } else {
                            if (playerList[i].penguin[j].y - 1 >= 0 && playerList[i].penguin[j].x + 1 < C && grid[playerList[i].penguin[j].y - 1][playerList[i].penguin[j].x + 1].status == 1) {
                                possible += 1;
                            }
                        }
                        break;

                    case 6:
                        if (playerList[i].penguin[j].y % 2 == 0) {
                            if (playerList[i].penguin[j].y + 1 < L && grid[playerList[i].penguin[j].y + 1][playerList[i].penguin[j].x].status == 1) {
                                possible += 1;
                            }
                        } else {
                            if (playerList[i].penguin[j].y + 1 < L && playerList[i].penguin[j].x + 1 < C && grid[playerList[i].penguin[j].y + 1][playerList[i].penguin[j].x + 1].status == 1) {
                                possible += 1;
                            }
                        }
                        break;

                    default:
                        printf("Erreur sw winner");
                        break;
                }
            }
        }